// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum QuestionType {
  CODING
  THEORY
  SYSTEM_DESIGN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  questionSets QuestionSet[]
 
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model QuestionSet {
  id          String      @id @default(cuid())
  title       String
  description String?
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  questions   Question[]
  createdAt   DateTime    @default(now())
}

model Question {
  id            String       @id @default(cuid())
  question      String
  type          QuestionType @default(CODING)
  difficulty    Difficulty   @default(MEDIUM)
  questionSet   QuestionSet  @relation(fields: [questionSetId], references: [id])
  questionSetId String
}